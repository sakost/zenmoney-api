# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CI

on:
  push:
    branches: [ "master", "develop" ]
    tags:
      - v0.1.*
  pull_request:
    branches: [ "master", "develop" ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          src:
            - 'src/**'
          tests:
            - 'tests/**'

    - name: Install uv and set the python version
      uses: astral-sh/setup-uv@v6
      with:
          version: "0.8.4"
          python-version: ${{ matrix.python-version }}
          enable-cache: true

    - name: Install dependencies
      run: uv sync --locked --all-extras --dev

    - name: Run linting
      if: ${{ steps.changes.outputs.src == 'true' }}
      run: |
        uv run ruff check .
        uv run ruff format --check .

    - name: Run type checking
      if: ${{ steps.changes.outputs.src == 'true' }}
      run: uv run mypy src/

    - name: Run pylint
      if: ${{ steps.changes.outputs.src == 'true' }}
      run: uv run pylint src/zenmoney_api/

    - name: Run tests
      if: ${{ steps.changes.outputs.tests == 'true' }}
      run: |
        uv run pytest --cov=src/zenmoney_api --cov-report=xml --junitxml=junit/test-results-${{ matrix.python-version }}.xml

    - name: Upload pytest test results
      uses: actions/upload-artifact@v4
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: junit/test-results-${{ matrix.python-version }}.xml
      if: ${{ always() }}

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      if: ${{ steps.changes.outputs.tests == 'true' }}

  security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      security-events: write

    steps:
    - uses: actions/checkout@v4

    - name: Install uv and set the python version
      uses: astral-sh/setup-uv@v6
      with:
          version: "0.8.4"
          enable-cache: true

    - name: Install dependencies
      run: uv sync --locked --all-extras --dev

    - name: Run bandit
      uses: PyCQA/bandit-action@v1

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: bandit-report.json
      if: ${{ always() }}

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v4

    - name: Install uv and set the python version
      uses: astral-sh/setup-uv@v6
      with:
          version: "0.8.4"
          enable-cache: true

    - name: Install dependencies
      run: uv sync --locked --all-extras --dev

    - name: Build package
      run: uv build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
